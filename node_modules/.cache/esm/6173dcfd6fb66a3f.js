let express,createServer,path,cookieParser,logger,indexRouter,usersRouter;_6fb‍.w("express",[["default",["express"],function(v){express=v}]]);_6fb‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_6fb‍.w("path",[["default",["path"],function(v){path=v}]]);_6fb‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_6fb‍.w("morgan",[["default",["logger"],function(v){logger=v}]]);_6fb‍.w("./routes/index",[["default",["indexRouter"],function(v){indexRouter=v}]]);_6fb‍.w("./routes/users",[["default",["usersRouter"],function(v){usersRouter=v}]]);







const app = express();
const server = createServer(app);

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

// Set port
app.set('port', process.env.PORT || 5000);


/**
 * Listen on provided port, on all network interfaces.
 */
async function init() {
  try {
    const isConnected = await mongoose.connect('mongodb://localhost:27017/surf_shop', 
    {
      useNewUrlParser: true,
      useCreateIndex: true
    });
    if(isConnected) {
      // listening to server
      await server.listen(port, () =>
        console.log(`server running on port ${app.get('port')}...`)
      );
      console.log("connected to mongodb")
    }
  } catch (error){
    throw error.message;
  }
}
init();